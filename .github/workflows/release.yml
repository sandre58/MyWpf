name: Release - Publish Packages

on:
  push:
    tags:
      - '*/v*'  # Matches tags like MyNet.Utilities/v1.2.3
  repository_dispatch:
    types: [tag_created]  # Triggered by tag.yml workflow

permissions:
  contents: write      # Required to create releases

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  parse-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse-tag.outputs.version }}
      project_name: ${{ steps.parse-tag.outputs.project_name }}
      project_path: ${{ steps.parse-tag.outputs.project_path }}
      project_dir: ${{ steps.parse-tag.outputs.project_dir }}
      tag: ${{ steps.parse-tag.outputs.tag }}
      is_prerelease: ${{ steps.detect-prerelease.outputs.is_prerelease }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          
      - name: Parse tag
        id: parse-tag
        run: |
          # Handle both push tag events and repository_dispatch events
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            tag="${{ github.event.client_payload.tag }}"
            project_name="${{ github.event.client_payload.project }}"
            version="${{ github.event.client_payload.version }}"
            echo "From repository_dispatch:"
            echo "Project => $project_name"
            echo "Version => $version"
            echo "Tag => $tag"
          else
            tag="${{ github.ref_name }}"
            echo "From push event - Full tag => $tag"
            
            # Extract project name and version from tag (format: ProjectName/vX.Y.Z)
            if [[ "$tag" =~ ^(.+)/v(.+)$ ]]; then
              project_name="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              
              echo "Project => $project_name"
              echo "Version => $version"
            else
              echo "Invalid tag format => $tag"
              echo "Expected format => ProjectName/vX.Y.Z"
              echo "tag_valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          # Search for the project file
          project_path=$(find src -name "$project_name.csproj" -type f | head -n1)
          project_dir=$(dirname "$project_path")
          
          echo "project_name=$project_name" >> $GITHUB_OUTPUT
          echo "project_path=$project_path" >> $GITHUB_OUTPUT
          echo "project_dir=$project_dir" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "tag_valid=true" >> $GITHUB_OUTPUT

      - name: Detect prerelease
        id: detect-prerelease
        run: |
          version="${{ steps.parse-tag.outputs.version }}"
          if [[ "$version" =~ -(alpha|beta|rc|preview|pre) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  # Build, Pack and publish
  publish:
    runs-on: 'ubuntu-latest'
    needs: parse-tag
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Build
        run: dotnet build ${{ needs.parse-tag.outputs.project_path }} \
              --configuration Release \
              -p:Version=${{ needs.parse-tag.outputs.version }} \
              -p:AssemblyVersion=${{ needs.parse-tag.outputs.version }} \
              -p:FileVersion=${{ needs.parse-tag.outputs.version }}

      - name: Test
        run: dotnet test --configuration Release --logger GitHubActions

      - name: Pack
        run: dotnet pack ${{ needs.parse-tag.outputs.project_path }} --configuration Release -p:PackageVersion=${{ needs.parse-tag.outputs.version }} -p:ContinuousIntegrationBuild=true -o packages

      - name: Publish to NuGet.org
        if: needs.parse-tag.outputs.is_prerelease == 'false'
        run: dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        
      - name: Publish to GitHub Packages
        if: needs.parse-tag.outputs.is_prerelease == 'true'
        run: dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --skip-duplicate

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: packages/*.nupkg

  # Job for creating GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [parse-tag, publish]
    if: needs.publish.result == 'success'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Fetch all tags
        run: git fetch --tags

      - name: Install git-chglog
        run: |
          echo "Installing git-chglog..."
          wget -O git-chglog.tar.gz https://github.com/git-chglog/git-chglog/releases/download/v0.15.4/git-chglog_0.15.4_linux_amd64.tar.gz
          tar -xzf git-chglog.tar.gz
          sudo mv git-chglog /usr/local/bin/
          chmod +x /usr/local/bin/git-chglog
          git-chglog --version

      - name: Update git-chglog configs for project
        run: |
          project_name="${{ needs.parse-tag.outputs.project_name }}"
          
          echo "Updating git-chglog configurations for $project_name..."
          
          # Update the title in both config files to match the current project
          sed -i "s/title: CHANGELOG/title: $project_name/" .github/.chglog/config.yml
          sed -i "s/title: CHANGELOG/title: $project_name/" .github/.chglog/release-config.yml

          echo "Configurations updated for project $project_name"

      - name: Generate release changelog
        id: changelog
        run: |
          set -e
          project_name="${{ needs.parse-tag.outputs.project_name }}"
          tag="${{ needs.parse-tag.outputs.tag }}"
          project_dir="${{ needs.parse-tag.outputs.project_dir }}"
          
          echo "Generating release changelog for $project_name using git-chglog..."
          echo "DEBUG: project_name=$project_name"
          echo "DEBUG: tag=$tag"
          echo "DEBUG: Looking for tags matching pattern $project_name/v*"
          
          # List all tags for this project for debugging
          echo "DEBUG: All tags for this project:"
          git tag -l "$project_name/v*" --sort=-version:refname
          
          # Find previous tag for this project
          previous_tag=$(git tag -l "$project_name/v*" --sort=-version:refname | grep -v "^$tag$" | head -n1)
          echo "DEBUG: previous_tag=$previous_tag"
          
          if [ -z "$previous_tag" ]; then
            echo "No previous tag found, generating changelog from beginning"
            # Generate changelog for current tag only (all history)
            git-chglog --config .github/.chglog/release-config.yml --path "$project_dir" --tag-filter-pattern "$project_name/v*" "$tag" > RELEASE_CHANGELOG.md
          else
            echo "Previous tag: $previous_tag"
            # Generate changelog between previous and current tag (for release)
            git-chglog --config .github/.chglog/release-config.yml --path "$project_dir" --tag-filter-pattern "$project_name/v*" "$previous_tag".."$tag" > RELEASE_CHANGELOG.md
          fi
          
          echo "Release changelog generated:"
          cat RELEASE_CHANGELOG.md

      - name: Update project CHANGELOG.md
        run: |
          project_name="${{ needs.parse-tag.outputs.project_name }}"
          tag="${{ needs.parse-tag.outputs.tag }}"
          project_dir="${{ needs.parse-tag.outputs.project_dir }}"
          project_changelog="$project_dir/CHANGELOG.md"
          
          echo "Updating permanent CHANGELOG.md for $project_name..."
          
          # Generate complete changelog for all versions of this project
          git-chglog --config .github/.chglog/config.yml --path "$project_dir" --tag-filter-pattern "$project_name/v*" > "$project_changelog"
          
          echo "Permanent CHANGELOG.md updated at $project_changelog"
          echo "Content preview:"
          head -30 "$project_changelog"

      - name: Commit updated CHANGELOG.md
        run: |
          project_name="${{ needs.parse-tag.outputs.project_name }}"
          project_dir="${{ needs.parse-tag.outputs.project_dir }}"
          version="${{ needs.parse-tag.outputs.version }}"
          project_changelog="$project_dir/CHANGELOG.md"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit the updated CHANGELOG.md
          git add "$project_changelog"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to CHANGELOG.md, skipping commit"
          else
            git commit -m "docs($project_name): update CHANGELOG.md for v$version [ci skip]"
            git pull --rebase origin main

            # Push the changes
            git push origin HEAD:main
            
            echo "CHANGELOG.md committed and pushed to main branch"
          fi

      - name: Download packages for release
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.parse-tag.outputs.tag }}
          name: ${{ needs.parse-tag.outputs.project_name }} v${{ needs.parse-tag.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ needs.parse-tag.outputs.is_prerelease == 'true' }}
          files: release-artifacts/*.nupkg

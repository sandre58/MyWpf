name: Manual - Tag Projects

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run - Only show what would be tagged without creating tags'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      force_all:
        description: 'Force tag all projects regardless of changes'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write      # Required to create tags

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  detect-and-tag:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # Use PAT if available: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Install tools
        run: |
          npm install

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Analyze changes and determine versions
        id: analyze
        run: |
          projects_versions="[]"
          has_projects_to_tag=false

          for project_dir in src/*/; do
            if [ -d "$project_dir" ]; then
              project=$(basename "$project_dir")
              echo "Processing project: $project"

              # Compute version
              result=$(node scripts/compute-version.js $project)
              version=$(echo "$result" | jq -r '.version')
              changed=$(echo "$result" | jq -r '.changed')
              echo "Version for $project: $version"

              if [ "$changed" = "true" ]; then
                projects_versions=$(echo $projects_versions | jq --arg p "$project" --arg v "$version" '. + [{"project":$p,"version":$v}]')
                has_projects_to_tag=true
              fi
            fi
          done

            # Minify JSON to avoid line breaks
          projects_versions_min=$(echo $projects_versions | jq -c '.')
          echo "projects_versions=$projects_versions_min" >> $GITHUB_OUTPUT
          echo "has_projects_to_tag=$has_projects_to_tag" >> $GITHUB_OUTPUT

      - name: Create tags
        if: steps.analyze.outputs.has_projects_to_tag == 'true'
        run: |
          echo "Creating tags..."

          for row in $(echo '${{ steps.analyze.outputs.projects_versions }}' | jq -c '.[]'); do
            project=$(echo $row | jq -r '.project')
            version=$(echo $row | jq -r '.version')
            tag_name="$project/v$version"

            echo "----------------------------------------"
            echo "Processing: $project"
            echo "Tag: $tag_name"
            echo "Version: $version"
            
            if [ "${{ inputs.dry_run }}" = "true" ]; then
              echo "DRY RUN: Would create tag $tag_name"
            else
              echo "Creating tag: $tag_name"
              
              # Create annotated tag
              git tag -a "$tag_name" -m "Release $project v$version

              This release was automatically created by GitHub Actions.
              
              Project: $project
              Version: $version
              Commit: $(git rev-parse HEAD)
              "
              
              echo "Tag $tag_name created successfully"
            fi
          done
          
          if [ "${{ inputs.dry_run }}" = "false" ]; then
            echo "Pushing all tags to origin..."
            
            # Push tags one by one to ensure proper processing
            for row in $(echo '${{ steps.analyze.outputs.projects_versions }}' | jq -c '.[]'); do
              project=$(echo $row | jq -r '.project')
              version=$(echo $row | jq -r '.version')
              tag_name="$project/v$version"

              echo "Pushing tag: $tag_name"
              
              # Push the tag using git
              git push origin "$tag_name"
              
              # Trigger release workflow via repository dispatch
              echo "Triggering release workflow for $tag_name..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/dispatches" \
                -d "{\"event_type\":\"tag_created\",\"client_payload\":{\"tag\":\"$tag_name\",\"project\":\"$project\",\"version\":\"$version\"}}"
              
              # Small delay to ensure GitHub processes the tag
              sleep 3
              
            done
            
            echo "All tags pushed successfully and release workflows triggered"
          else
            echo "DRY RUN: Tags were not actually created or pushed"
          fi

      - name: Summary
        run: |
          echo "=========================================="
          echo "TAGGING SUMMARY"
          echo "=========================================="
          echo "Mode: ${{ inputs.dry_run == 'true' && 'DRY RUN' || 'LIVE' }}"
          echo "Force all: ${{ inputs.force_all }}"
          echo ""

          if [ "${{ steps.analyze.outputs.has_projects_to_tag }}" = "true" ]; then
            echo "Projects processed:"
            for row in $(echo '${{ steps.analyze.outputs.projects_versions }}' | jq -c '.[]'); do
              project=$(echo $row | jq -r '.project')
              tag_name="$project/v$(echo $row | jq -r '.version')"

              if [ "${{ inputs.dry_run }}" = "true" ]; then
                echo "  - $project -> $tag_name (DRY RUN)"
              else
                echo "  - $project -> $tag_name (TAGGED)"
              fi
            done
          else
            echo "No projects needed tagging."
          fi
          
          echo ""
          echo "=========================================="
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "This was a dry run. No tags were actually created."
            echo "To create the tags, run this workflow again with 'Dry run' set to 'false'."
          fi
